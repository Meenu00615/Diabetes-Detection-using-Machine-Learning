# -*- coding: utf-8 -*-
"""Diabetes_Checking using Machine Learning_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zZOa7_8XG2vmZRFZCFJkWhDeqA8cVzTi
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#For excel type of the dataset excel in place of the csv and .xlsx
data1=pd.read_excel('/content/diabetes.xlsx')

#First five row of the diabetes dataset
data1.head(5)

data1.describe()

data1.shape    # There is no input parameter in shape function

data1['Outcome'].value_counts()

#0 - Non diabetic
#1 - Diabetic

data1.groupby('Outcome').mean()

#separating data and labels
X=data1.drop(columns ='Outcome', axis=1)
Y=data1['Outcome']

print(X)

print(Y)

#Data Standarizatiom

#importing neccesary libraries for standarization

from sklearn.preprocessing import StandardScaler

from sklearn.model_selection import train_test_split

from sklearn import svm

from sklearn.metrics import accuracy_score

scaler=StandardScaler()

scaler.fit(X)

s_data=scaler.transform(X)

print(s_data)

X=s_data

Y=data1['Outcome']

print(X)

print(Y)

#Spliting the model

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_test.shape, X_train.shape)

#training the model

classifier=svm.SVC(kernel="linear")

classifier.fit(X_train, Y_train)

#Model Evaluation and Accuracy Checking

#Accuracy for X_train

X_train_prediction=classifier.predict(X_train)

accuracy1=accuracy_score(X_train_prediction, Y_train)

print('Accuracy of the training model:', X_train_prediction)

#Checking testing data accuracy

X_test_prediction=classifier.predict(X_test)

accuracy1=accuracy_score(X_test_prediction, Y_test)

print('Accuracy of testing data:',X_test_prediction)

"""###Making a Predictive System of Person having Diabetes or not"""

input=(5,166,72,19,175,25.8,0.587,51)

#Changing input data to numpy array

#asarray is similar to asarray, but asarray has fewer options.

input_data=np.asarray(input)

input_reshaped_data=input_data.reshape(1, -1)

standard_data=scaler.transform(input_reshaped_data)

prediction=classifier.predict(standard_data)

print(prediction)

if(prediction[0]==0):
  print('Persion is not having diabetes')
else:
  print('Person is having diabetes')

#Hence Person is having Diabetes, because the prediction we got is equal to 1.